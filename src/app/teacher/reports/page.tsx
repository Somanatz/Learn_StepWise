
// src/app/teacher/reports/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { FileText, Download, Eye, Filter, Loader2, AlertTriangle } from "lucide-react";
import Link from "next/link";
import { api } from '@/lib/api'; // Assuming API utility
import { Skeleton } from '@/components/ui/skeleton';

interface Report {
  id: string;
  student_name: string; // Assuming backend sends this
  class_name: string; // Assuming backend sends this
  report_date: string; // ISO date string
  overall_grade?: string; // Optional
  // generated_by_username?: string; // Optional
  // file_url?: string; // Optional for direct download
}

export default function ViewReportsPage() {
  const [reports, setReports] = useState<Report[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchReports = async () => {
      setIsLoading(true);
      setError(null);
      try {
        // TODO: Implement API endpoint to fetch reports generated by/for this teacher
        // const response = await api.get<Report[]>('/teacher/generated-reports/');
        // setReports(response);
        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
        setReports([]);
        setError("Reports API not yet implemented. Displaying empty state.");
      } catch (err) {
        console.error("Failed to fetch reports:", err);
        setError(err instanceof Error ? err.message : "Could not load reports.");
      } finally {
        setIsLoading(false);
      }
    };
    fetchReports();
  }, []);


  return (
    <div className="space-y-8">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold flex items-center"><FileText className="mr-3 text-primary" /> View Generated Reports</h1>
          <p className="text-muted-foreground">Access and manage all previously generated student report cards.</p>
        </div>
        <Link href="/teacher/report-card" passHref legacyBehavior>
          <Button size="lg" variant="outline">
            Generate New Report Card
          </Button>
        </Link>
      </div>

      <Card className="shadow-lg rounded-xl">
        <CardHeader>
          <div className="flex flex-col sm:flex-row justify-between items-center gap-2">
            <CardTitle>Report Archive</CardTitle>
            <Button variant="outline" onClick={() => alert("Filter TBI")}>
              <Filter className="mr-2 h-4 w-4" /> Filter Reports
            </Button>
          </div>
        </CardHeader>
        <CardContent>
           {isLoading ? (
             <div className="space-y-2">
                {[...Array(3)].map((_, i) => <Skeleton key={i} className="h-12 w-full rounded-md" />)}
             </div>
          ) : error ? (
             <Card className="text-center py-6 bg-destructive/10 border-destructive rounded-md">
                <AlertTriangle className="mx-auto h-8 w-8 text-destructive mb-2" />
                <CardTitle className="text-lg">Error Loading Reports</CardTitle>
                <CardDescription className="text-destructive-foreground">{error}</CardDescription>
            </Card>
          ) : reports.length === 0 ? (
            <p className="text-muted-foreground text-center py-4">No reports generated yet or API not available.</p>
          ) : (
            <div className="overflow-x-auto rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Student Name</TableHead>
                    <TableHead className="text-center">Class</TableHead>
                    <TableHead>Report Date</TableHead>
                    <TableHead className="text-center">Overall Grade</TableHead>
                    {/* <TableHead className="hidden md:table-cell">Generated By</TableHead> */}
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {reports.map((report) => (
                    <TableRow key={report.id} className="hover:bg-muted/50">
                      <TableCell className="font-medium">{report.student_name}</TableCell>
                      <TableCell className="text-center">{report.class_name}</TableCell>
                      <TableCell>{new Date(report.report_date).toLocaleDateString()}</TableCell>
                      <TableCell className="text-center font-semibold">{report.overall_grade || 'N/A'}</TableCell>
                      {/* <TableCell className="hidden md:table-cell text-muted-foreground">{report.generated_by_username}</TableCell> */}
                      <TableCell className="text-right space-x-2">
                        <Button variant="ghost" size="icon" title="View Report" onClick={() => alert(`View Report ${report.id} - TBI`)}>
                          <Eye className="h-5 w-5 text-blue-500" />
                        </Button>
                        <Button variant="ghost" size="icon" title="Download Report" onClick={() => alert(`Download Report ${report.id} - TBI`)}>
                          <Download className="h-5 w-5 text-green-500" />
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
